----table to capture DB Time stats
Create table Peak_DBTime_measurement 
(begin_time date,
end_time,
CPU_Usage_Per_Sec number,
CPU_TimeRatio number,
DB_TimeRatio number,
Exec_Per_sec number,
Exec_Per_Txn number,
Resp_Time_sec_per_Txn number
SQL_Serv_Resp_Time_Sec number
Transaction_Per_sec number);

create synonym peak_IOPS_TABLE for PEAK_IOPS_MEASUREMENT;
grant select on PEAK_IOPS_MEASUREMENT to PUBLIC;

/*
V$SYSMETRIC – last 15 and 60 seconds
V$SYSMETRIC_SUMMARY – values  last hour (last snapshot)  like avg, max, min etc
V$SYSMETRIC_HISTORY – last hour for 1 minute interval(long duration), last 3 minutes for 15 second deltas\interval(short duration )
DBA_HIST_SYSMETRIC_SUMMARY – hour summaries for last week.
V$SYSTEM_WAIT_CLASS – cumulative since start up
V$WAITCLASSMETRIC – last 60 seconds deltas
V$WAITCLASSMETRIC_HISTORY – 60 seconds deltas for last hour
*/
COLUMN METRIC_NAME FOR A35
COLUMN METRIC_UNIT FOR A25
COLUMN WAIT_TYPE FOR a25
select  CASE METRIC_NAME
            WHEN 'SQL Service Response Time' then 'SQL Service Response Time (secs)'
            WHEN 'Response Time Per Txn' then 'Response Time Per Txn (secs)'
            ELSE METRIC_NAME
            END METRIC_NAME,
                CASE METRIC_NAME
            WHEN 'SQL Service Response Time' then ROUND((MAXVAL / 100),2)
            WHEN 'Response Time Per Txn' then ROUND((MAXVAL / 100),2)
            ELSE ROUND(MAXVAL,2)
            END MAXIMUM,
                CASE METRIC_NAME
            WHEN 'SQL Service Response Time' then ROUND((AVERAGE / 100),2)
            WHEN 'Response Time Per Txn' then ROUND((AVERAGE / 100),2)
            ELSE ROUND(AVERAGE,2)
            END AVERAGE,to_char(trunc(max(BEGIN_TIME),'MI'),'DD-MON-YY HH24:MI') BEGIN_TIME,to_char(trunc(MAX(END_TIME),'MI'),'DD-MON-YY HH24:MI')END_TIME
from    SYS.V_$SYSMETRIC_SUMMARY 
where   METRIC_NAME in ('CPU Usage Per Sec',
                      'CPU Usage Per Txn',
                      'Database CPU Time Ratio',
                      'Database Wait Time Ratio',
                      'Executions Per Sec',
                      'Executions Per Txn',
                      'Response Time Per Txn',
                      'SQL Service Response Time',
                      'User Transaction Per Sec')
GROUP BY METRIC_NAME,MINVAL,MAXVAL,AVERAGE  
ORDER BY METRIC_NAME                    
                      /


-----------script to run for (run_duration=60Min) with  (capture_gap=5scd) to collect IO stats in peak_iops_m table

grant execute on dbms_lock to kh85124;

create or replace procedure collect_DBTIME(h IN number) is 
   run_duration number :=h*3600;
   capture_gap number :=5;
   loop_count number :=run_duration/capture_gap;
   rdio number ;
   wtio number;
   prev_rdio number :=0;
   prev_wtio number :=0;
   rdbt number;
   wtbt number;
   prev_rdbt number;
   prev_wtbt number;
   
BEGIN 
 FOR i in 1..loop_count LOOP
   SELECT SUM(value) INTO rdio from v$sysstat --v$sysstat for 12c
   WHERE name='physical read total IO requests';
select  CASE METRIC_NAME
            WHEN 'SQL Service Response Time' then 'SQL Service Response Time (secs)'
            WHEN 'Response Time Per Txn' then 'Response Time Per Txn (secs)'
            ELSE METRIC_NAME
            END METRIC_NAME,
                CASE METRIC_NAME
            WHEN 'SQL Service Response Time' then ROUND((MAXVAL / 100),2)
            WHEN 'Response Time Per Txn' then ROUND((MAXVAL / 100),2)
            ELSE ROUND(MAXVAL,2)
            END MAXIMUM,
                CASE METRIC_NAME
            WHEN 'SQL Service Response Time' then ROUND((AVERAGE / 100),2)
            WHEN 'Response Time Per Txn' then ROUND((AVERAGE / 100),2)
            ELSE ROUND(AVERAGE,2)
            END AVERAGE,to_char(trunc(max(BEGIN_TIME),'MI'),'DD-MON-YY HH24:MI') BEGIN_TIME,to_char(trunc(MAX(END_TIME),'MI'),'DD-MON-YY HH24:MI')END_TIME
from    SYS.V_$SYSMETRIC_SUMMARY 
where   METRIC_NAME in ('CPU Usage Per Sec',
                      'CPU Usage Per Txn',
                      'Database CPU Time Ratio',
                      'Database Wait Time Ratio',
                      'Executions Per Sec',
                      'Executions Per Txn',
                      'Response Time Per Txn',
                      'SQL Service Response Time',
                      'User Transaction Per Sec')
GROUP BY METRIC_NAME,MINVAL,MAXVAL,AVERAGE  
ORDER BY METRIC_NAME  ;                  
   IF i> 1 THEN 
             insert into Peak_DBTime_measurement begin_time date,end_time,CPU_Usage_Per_Sec ,CPU_TimeRatio,DB_TimeRatio ,Exec_Per_sec ,Exec_Per_Txn ,Resp_Time_sec_per_Txn ,SQL_Serv_Resp_Time_Sec,Transaction_Per_sec)
            VALUES (
             sysdate,
             (rdio-prev_rdio)/5,
             (wtio-prev_wtio)/5,
             ((rdio-prev_rdio)/5)+((wtio-prev_wtio))/5,
             (rdbt-prev_rdbt)/5,
             (wtbt-prev_wtbt)/5,
             ((rdbt-prev_rdbt)/5)+((wtbt-prev_wtbt))/5);
   END IF;
         prev_rdio:=rdio;
         prev_wtio:=wtio;
         prev_rdbt:=rdbt;
         prev_wtbt:=wtbt;
         DBMS_LOCK.SLEEP(capture_gap);
 END LOOP;
 COMMIT;
 EXCEPTION
 WHEN OTHERS THEN 
     ROLLBACK;
     
 END;
 / 
 
 
 ------------FIND peack IOPS used by the database seek largest value for TOTAL_IO
 SELECT total_io PEAK_IOPS,total_bytes PEAK_MB,round((total_read_io/total_io)*100,2) "read_%",round((total_write_io/total_io)*100,2) "write%"  FROM PEAK_IOPS_MEASUREMENT where total_io =(select max(total_io) from PEAK_IOPS_MEASUREMENT) ;
 
 
 HMR 
 kh85124@PRD1>  SELECT round(total_io,2) PEAK_IOPS,round(total_bytes,2) PEAK_MB,round((total_read_io/total_io)*100,2) "read_%",round((total_write_io/total_io)*100,2) "write%" ,b.MAX_MBS FROM PEAK_IOPS_MEASUREMENT,(select round(max(total_bytes),2) max_mbs from peak_iops_table)b where total_io =(select max(total_io) from PEAK_IOPS_MEASUREMENT) ;
 
 
 
 begin
    dbms_scheduler.create_job(job_name        => 'PEAK_IOPS_MEASUREMENT_JOB',
                              job_type        => 'PLSQL_BLOCK',
                              job_action      => 'BEGIN calculate_IOPS(3); END;',
                              start_date      => systimestamp,
                              end_date        => sysdate+7,
                              repeat_interval => 'freq=daily;byday=mon,tue,wed,thu,fri; byhour=10; byminute=32; bysecond=0;',
                              enabled         => true,
                              auto_drop       => false,
                              comments        => 'this job collects IOPS for 4 hours every morining.');
end;
/
 
 BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE (
   'mytestjob', 'logging_level', DBMS_SCHEDULER.LOGGING_FULL);
END;
/

DBMS_SCHEDULER.CREATE_PROGRAM                                              DBMS_scheduler.define_program_argument(        
    (                                                                         program_name => 'PEAK_IOPS_MEASUREMENT'     
      program_name         => 'PEAK_IOPS_MEASUREMENT'                       , argument_position => 1                      
     ,program_type         => 'STORED_PROCEDURE'                            , argument_type => 'NUMBER'   --'VARCHAR2'    
     ,program_action       => 'calculate_IOPS'                              , default_value => '1'        --'STARTING'                 
     ,number_of_arguments  => 1                                           );                                              
     ,enabled              => FALSE
     ,comments             => NULL
    );


 DBMS_scheduler.set_attribute(
      name => 'PEAK_IOPS_MEASUREMENT'
    , attribute => 'number_of_arguments'
    , value => 1);
    
    
 DBMS_scheduler.create_job(                                 OR                DBMS_scheduler.set_job_argument_value(
    job_name => 'PEAK_IOPS_MEASUREMENT_JOB'                                   job_name => 'PEAK_IOPS_MEASUREMENT_JOB'     
    , program_name => 'PEAK_IOPS_MEASUREMENT'                                 , argument_position => 1            
    ,number_of_arguments=> 1                                                  , argument_value => '1'         --'STARTING'   
    );                                                                        );                      
