
SEE IF DB IS SET TO RESTRICTED MODE
hf53es@SGSDSA.ING.BE> select instance_name,logins from v$instance;

INSTANCE_NAME    LOGINS
---------------- ----------
SGSDSA           RESTRICTED	

select instance_name,logins from v$instance;



To see wher is the alert.log
 select value from v$parameter where name = 
'background_dump_dest';


adrci> ips pack incident 18147 in /tmp
ips add {incident inc_id | problem prob_id | problemkey pr_key |         seconds secs | time start_time to end_time}         package pkg_id

gunzip < alert_AGXFBA.log.20120504_0600Fri.gz | grep -n "ORA-01555" | awk -F":" '{print $1-2 "," $1+2 "p"}' | xargs -t -i sed -n {}

=> return the number lines when you can find the ORA-01555

Thu May 03 16:55:09 CEST 2012
ORA-01555 caused by SQL statement below (SQL ID: darmc8t5kawu1, Query Duration=8529 sec, SCN: 0x0000.1811d3b6):
Thu May 03 16:55:09 CEST 2012
SELECT EVENTID FROM Historic_165526304 WHERE (TRUNC( TO_DATE('2012-05-03','yyyy-MM-dd')-EVENTDATE) >= 63)
Thu May 03 16:56:45 CEST 2012


***trace alert
alter system set events '44201 trace name errorstack level 10';
4) Turn off the events:
ALTER SYSTEM SET EVENTS '44201 TRACE NAME ERRORSTACK OFF' scope=both;


#ps -ef | grep -v grep | grep pmon
===SEE SHARED MEMORY STATUS

 @sysresv
 IPC Resources for ORACLE_SID "SABDMD" :
Shared Memory:
ID              KEY
655137          0x00000000
348266          0x79975c14
Semaphores:
ID              KEY
50528258        0xb3486f70
Oracle Instance alive for sid "SABDMD"
=========SEE coresponding process
ipcs -sb | grep -v grep | grep oracle
ipcs -a |grep -i oracle|sort -f|grep 348266 
m     348266   0x79975c14 --rw-r-----   oracle      dba   oracle      dba     88 4278206464  6650 13861 17:40:34 17:40:34 13:02:11

========================kill shared memory    ipcrm -m(shared memory)| -s [semaphore]

#!/bin/ksh

printf "Enter Destination File: "
read dest

files="/*/u??/oradata/$ORACLE_SID/oralogs -name alert_$ORACLE_SID.log"

for file in $(find $files)
do
DT=$(date)
awk '
BEGIN {Flg=0}
NR==1 {R=split(DATE,TMP," ")
       Day=TMP[1]
       Month=TMP[2]
       NoDay=TMP[3]}
{NoDayM=NoDay-1}
NF==5 && $2==Month && ($3==(NoDayM) || $3==(NoDayM)) {Flg=1}
Flg==1 {print $0}
' DATE="$DT" $file | awk '
/^ORA-/ || /cannot/ {print DATE print $0}
NF==5 {DATE=$0}
' >> $dest

done

exit 0

*******************************************11G
see log location

select distinct db_user, action, returncode, OS_USER, USERHOST from DBA_COMMON_AUDIT_TRAIL where db_user like '%FLM%' and returncode !=0 ;



===================================================
ORA-604: error occurred at recursive SQL level %s

1) select * from v$resource_limit

2) look your max_utilization of sessions.

3) increase you init.ora parameterif necessary.

==========================================================

I have also got a work around - 


a) in production DB, SHUTDOWN 
b) in production DB, STARTUP 
c) in production DB, ALTER SYSTEM SWITCH LOGFILE; 
d) in standby DB, STARTUP NOMOUNT; 
e) in standby DB, ALTER DATABASE MOUNT STANDBY DATABASE; 
f) in standby DB, RECOVER STANDBY DATABASE; AUTO 
g) in standby DB, ALTER DATABASE OPEN READ ONLY;  





hf53es@AAHOSC.ING.BE> select * from v$diag_info;

   INST_ID NAME                           VALUE
---------- ------------------------------ -----------------------------------------------------------------------------------
         1 Diag Enabled                   TRUE
         1 ADR Base                       /APPL/ORACLE/AAHOSC/admin
         1 ADR Home                       /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC
         1 Diag Trace                     /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC/trace
         1 Diag Alert                     /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC/alert
         1 Diag Incident                  /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC/incident
         1 Diag Cdump                     /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC/cdump
         1 Health Monitor                 /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC/hm
         1 Default Trace File             /APPL/ORACLE/AAHOSC/admin/diag/rdbms/aahosc/AAHOSC/trace/AAHOSC_ora_11207446.trc
         1 Active Problem Count           1
         1 Active Incident Count          3
adrci>show alert -tail -f
adrci> help show alert

  Usage: SHOW ALERT [-p <predicate_string>]  [-term]
                    [ [-tail [num] [-f]] | [-file <alert_file_name>] ]
  Purpose: Show alert messages.
show alert -p "message_text like '%incident%'"
  Options:
    [-p <predicate_string>]: The predicate string must be double-quoted.
    The fields in the predicate are the fields:
        ORIGINATING_TIMESTAMP         timestamp
        NORMALIZED_TIMESTAMP          timestamp
        ORGANIZATION_ID               text(65)
        COMPONENT_ID                  text(65)
        HOST_ID                       text(65)
        HOST_ADDRESS                  text(17)
        MESSAGE_TYPE                  number
        MESSAGE_LEVEL                 number
        MESSAGE_ID                    text(65)
        MESSAGE_GROUP                 text(65)
        CLIENT_ID                     text(65)
        MODULE_ID                     text(65)
        PROCESS_ID                    text(33)
        THREAD_ID                     text(65)
        USER_ID                       text(65)
        INSTANCE_ID                   text(65)
        DETAILED_LOCATION             text(161)
        UPSTREAM_COMP_ID              text(101)
        DOWNSTREAM_COMP_ID            text(101)
        EXECUTION_CONTEXT_ID          text(101)
        EXECUTION_CONTEXT_SEQUENCE    number
        ERROR_INSTANCE_ID             number
        ERROR_INSTANCE_SEQUENCE       number
        MESSAGE_TEXT                  text(2049)
        MESSAGE_ARGUMENTS             text(129)
        SUPPLEMENTAL_ATTRIBUTES       text(129)
        SUPPLEMENTAL_DETAILS          text(129)
        PROBLEM_KEY                   text(65)

    [-tail [num] [-f]]: Output last part of the alert messages and 
    output latest messages as the alert log grows. If num is not specified, 
    the last 10 messages are displayed. If "-f" is specified, new data
    will append at the end as new alert messages are generated.

    [-term]: Direct results to terminal. If this option is not specified,
    the results will be open in an editor. 
    By default, it will open in emacs, but "set editor" can be used
    to set other editors.

    [-file <alert_file_name>]: Allow users to specify an alert file which 
    may not be in ADR. <alert_file_name> must be specified with full path.
    Note that this option cannot be used with the -tail option

  Examples:  
    show alert 
    show alert -p "message_text like '%incident%'"
    show alert -tail 20
    
    ***************************************************ORADEBUG HOW TO
    
 
 ORADEBUG How To
 -----------------

What is ORADEBUG:
-----------------

ORADEBUG is a debugger tool, can be used for (tracing any session, dump DB memory structure, suspend/resume a session and the most useful use is to analyze the hang when an instance is hanging by creating a report shows the blocked/blocker sessions).

How to use ORADEBUG:

First login to SQLPLUS AS SYSDBA -prelim


Second set your PID: 

SQL> oradebug setmypid

To perform a cluster wide analysis:

SQL> oradebug setinst all

To make the tracefile size unlimited:

SQL> oradebug unlimit

To Run the Hang Analysis: <The most useful use for ORADEBUG>

SQL> oradebug -g def hanganalyze <level#>

-> This will create a logfile and will give you it's path.

-Available level# are:
10     Dump all processes (IGN state)
5      Level 4 + Dump all processes involved in wait chains (NLEAF state)
4      Level 3 + Dump leaf nodes (blockers) in wait chains (LEAF,LEAF_NW,IGN_DMP state)
3      Level 2 + Dump only processes thought to be in a hang (IN_HANG state) 
1-2  Only HANGANALYZE basic output, no process dump at all

*Level 4 and above are resource intensive + large output, which can impact the instance performance.

Oracle recommend to use level 3: 

SQL> ORADEBUG -g def hanganalyze 3


How to read the HANGANALYZE trace:

Generally: Read the log and search for these keywords "final blocker" if not found search for "blocked by" & "blocking".

Note: Open chains consist of processes waiting for a resource held by a blocker. These are not true hangs and can be resolved by killing the holding session and allowing the blocked processes to proceed. This can be useful when a process is holding a latch, frequent example is the library latch, and other processes are waiting for the latch.


Check section "State of ALL nodes" At the end of the HANGANALYZE log :

The data under this line means:
([nodenum]/cnode/sid/sess_srno/session/ospid/state/[adjlist]):

"cnode" column means: cluster node number
"sid" is the Oracle session ID!
"sess_srno" column means: SERIAL#
"ospid" The operating system process ID
"state" columns have the following vlaues:

Session with status "LEAF" or "LEAF_NW" means a session blocking others "Good candidate for kill" specially "LEAF".
Session with status "NLEAF" means waiting session and appear to be hanging. 
Session with status "IN_HANG" means there is a problem!
Session with status "IGN" or "IGN_DMP" means the session is idle.


Caution: Do not kill critical processes like SMON or PMON as that would terminate the instance.

Other Commands:

To Check the current trace file name:

SQL> oradebug tracefile_name

Flush any pending writes to the trace file and close it:

SQL> oradebug flush
SQL> oradebug close_trace

To trace a specific session with it's OS PID:

SQL> oradebug setospid 

To trace a specific session with it's Oracle PID:

SQL> oradebug setorapid 


To freeze/Suspend a session:

First you have to get the PID for that session and set ORADEBUG as it:
SQL> oradebug setospid 12518


*12518 is the PID for the session you want to kill


Second Freeze/Hang the session even it running in a middle of something it will freeze:
SQL> oradebug suspend

To UnFreeze/Resume the session to continue it's work:
SQL> oradebug resume


Trace Oracle Clusterware:

Trace CRS events:

SQL> oradebug dump crs 3

Trace CSS behaviour:

SQL> oradebug dump css 3

Trace OCR:

SQL> oradebug dump ocr 3
