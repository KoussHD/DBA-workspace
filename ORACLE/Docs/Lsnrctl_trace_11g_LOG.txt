1- View for rdbms log entries:

CREATE OR REPLACE view my_db_alert_log as
SELECT ORIGINATING_TIMESTAMP,HOST_ID,HOST_ADDRESS,DETAILED_LOCATION,MODULE_ID,
       CLIENT_ID,PROCESS_ID,USER_ID,MESSAGE_ID,MESSAGE_GROUP,MESSAGE_TEXT,PROBLEM_KEY,FILENAME
FROM V$DIAG_ALERT_EXT WHERE trim(COMPONENT_ID)='rdbms';

2- View for listener log entries:

CREATE OR REPLACE VIEW my_lsnr_alert_log as
SELECT ORIGINATING_TIMESTAMP,HOST_ID,HOST_ADDRESS,DETAILED_LOCATION,MODULE_ID,
       CLIENT_ID,PROCESS_ID,USER_ID,MESSAGE_ID,MESSAGE_GROUP,MESSAGE_TEXT,PROBLEM_KEY,FILENAME
FROM V$DIAG_ALERT_EXT WHERE trim(COMPONENT_ID)='tnslsnr';

========
Now, you can query alert.log directly in SQL*Plus (for example, here’s my last hour rdbms alert log file entries):
========

1- Last hour rdbms alert log file entries (alert.log)
SQL> SELECT  
 ORIGINATING_TIMESTAMP,DETAILED_LOCATION,MESSAGE_GROUP,MESSAGE_TEXT
 FROM my_db_alert_log
 WHERE ORIGINATING_TIMESTAMP> systimestamp - INTERVAL '0 01:00:00.0' DAY TO SECOND(1)
 ORDER BY 1
 /


2- Last hour log for the listener.log
SQL> SELECT
 ORIGINATING_TIMESTAMP,DETAILED_LOCATION,MESSAGE_GROUP,MESSAGE_TEXT
 FROM my_lsnr_alert_log
 WHERE ORIGINATING_TIMESTAMP> systimestamp - INTERVAL '0 01:00:00.0' DAY TO SECOND(1)
 ORDER BY 1
   /
   
   
   =====================================10g 
Step1 :  create directory TNSLOG as 'D:\oracle\product\10.2.0\db_1\NETWORK\log';
Step 2: Create an external table definition. Note that no data is loaded, just the method reading the file:

     CREATE TABLE listener_log (timestamp_D date,connect_data VARCHAR2(2000),protocol_info VARCHAR2(80),EVENT VARCHAR2(200),SID VARCHAR2(200),RETURN_CODE number)
        ORGANIZATION EXTERNAL
        (TYPE oracle_loader
         DEFAULT DIRECTORY TNSLOG
         ACCESS PARAMETERS
            (RECORDS DELIMITED BY newline
             NOBADFILE NODISCARDFILE NOLOGFILE
             FIELDS TERMINATED BY "*" LRTRIM (timestamp_D char date_format DATE mask "DD-MON-YYYY hh24:mi:ss", connect_data, protocol_info, event,sid,return_code)) 
             LOCATION ('listener.log'))
    REJECT LIMIT UNLIMITED;


Step 3: Query the table directly or load it into an Oracle table for better performance and consistency. You can limit your date range here to load only the period you need:

col return_code 
col host for a10 
col sid for a4
col connect_data for a60
col event for a18
Create table listener_log2 as 
  Select TIMESTAMP_D,connect_data, event, sid, return_code,substr(connect_data, instr(connect_data,'HOST=')+5, instr(connect_data,')', instr(connect_data,'HOST='))-instr(connect_data,'HOST=')-5) 
  as host from listener_log where timestamp_D >= sysdate - interval '1' day;

     Note that I extract the “host” to see where connections are coming from.

Step 4: Query grouping by hour. If you need say by minute, replace hh with mi.

SELECT host,trunc(timestamp_d,'hh'),count(*)-count(nullif(return_code,0)) as success, count(nullif(return_code,0)) as failure,count(*) as total
from listener_log2 group by host,trunc(timestamp_d,'hh') order by 2,1;



- This a quick and dirty way of doing it, but it serves its purpose. Feel free to improve on this (perhaps have it extract all the connect data, including “service updates” etc.) and post the improved version in a comment.   
     
================================= 
LISTENER
==================================


ORA_CLIENT_HOME/network/admin/sqlnet.ora file.

# sqlnet.ora Network Configuration File: /u01/app/oracle/product/11.2.0/dbhome_1/network/admin/sqlnet.ora
# Generated by Oracle configuration tools.
 
NAMES.DIRECTORY_PATH= (TNSNAMES, EZCONNECT)
TRACE_LEVEL_CLIENT=USER
TRACE_FILENO_CLIENT=6
TRACE_FILELEN_CLIENT=51200
TRACE_UNIQUE_CLIENT=ON
TRACE_TIMESTAMP_CLIENT=ON
TRACE_DIRECTORY_CLIENT=/home/oracle/client_trace
LOG_DIRECTORY_CLIENT=/home/oracle/client_trace
DIAG_ADR_ENABLED=OFF
ADR_BASE = /u01/app/oracle
--------------------------
change the listener log file 
lsnrctl>set log listener2.log
- on windows make sure you open the MSDOS-BOX as aadmin

1- TRACE_LEVEL_listener_name
--------------------------
Purpose :Use the parameter TRACE_LEVEL_listener_name to turn listener tracing on, at a specific level, or off.
Default off

Values:
--------
off - for no trace output
user - for user trace information
admin - for administration trace information
support - for Oracle Support Services trace information

TRACE_LEVEL_listener=admin

2- TRACE_TIMESTAMP_listener_name
--------------------------------
Purpose : When parameter TRACE_LEVEL_listener_name is set to a specific tracing level, you can use the parameter TRACE_TIMESTAMP_listener_name to add a time stamp in the form of dd-mon-yyyy hh:mi:ss:mil 
to every trace event in the trace file for the listener.
Default  on

Values:
------
on or true | off or false

Example

TRACE_TIMESTAMP_listener=true

3- TRACE_DIRECTORY_listener_name
-----------------------------
Purpose : Use the parameter TRACE_DIRECTORY_listener_name to specify the destination directory of the listener trace file.

Default The $ORACLE_HOME/network/trace directory on UNIX operating systems and the ORACLE_HOME\network\trace directory on Windows

Example:

TRACE_DIRECTORY_listener=/oracle/network/admin/trace

4- TRACE_FILE_listener_name
------------------------
Purpose: Use the parameter TRACE_FILE_listener_name to specify the name of the trace file for the listener.
Default listener.trc

Example:
TRACE_FILE_listener_name=list.trc
TRACE_TIMESTAMP_listener_name

Syntax
-------
From the operating system:

lsnrctl SET TRC_LEVEL {level}

From the Listener Control utility:

LSNRCTL> SET TRC_LEVEL {level}

Arguments
{level}: Specify one of the following trace levels:

off for no trace output

user for user trace information

admin for administration trace information

support for Oracle Support Services trace information

Example
LSNRCTL> SET TRC_LEVEL admin  
Connecting to (ADDRESS=(PROTOCOL=TCP)(HOST=sales-server)(PORT=1521))
LISTENER parameter "trc_level" set to admin
The command completed successfully


5- TRACE
--------

Purpose : Use the command TRACE to turn on tracing for the listener.
Password Required If One Has Been Set Yes. If a password is set, then issue the SET PASSWORD command prior to this command.

Syntax
From the operating system:
lsnrctl trace {level}[listener_name] 

From the Listener Control utility:
LSNRCTL> trace {level} [listener_name] 

Arguments
{level}: Specify one of the following trace levels:

off for no trace output
user for user trace information
admin for administration trace information
support for Oracle Support Services trace information

[listener_name]: Specify the listener name, if the default name of LISTENER is not used.

Usage Notes
This command has the same functionality as SET TRC_LEVEL command.

Example
LSNRCTL> TRACE ADMIN lsnr
Connecting to (ADDRESS=(PROTOCOL=TCP)(HOST=sales-server)(PORT=1521))
Opened trace file: /oracle/network/trace/listener.trc
The command completed successfully

=======================================
Replace listener.log once too big :
=======================================

1- A better option would be to stop logging to the listener.log file:
Type LSNRCTL> set log_status off
now you can navigate to the file location and delete the file using the operating system. This will prevent the file from growing in the future.
This will allow you to delete listener.log but nothing will be logged when the log_status is set to off.
If you like, you can restart logging LSNRCTL> set log_status on

2- If you want to the logging to continue. you can switch to a different logging file:
type LSNRCTL> set log_file listener2.log





================================

trace client parameter sqlnet.ora 
TRACE_LEVEL_CLIENT = ADMIN 
TRACE_UNIQUE_CLIENT = on 
TRACE_LEVEL_SERVER = ADMIN 
TRACE_DIRECTORY_CLIENT = C:\TEMP 
TRACE_FILE_CLIENT = CLIENT 
TRACE_DIRECTORY_SERVER = C:\TEMP 
TRACE_FILE_SERVER = SERVER 
TRACE_TIMESTAMP_CLIENT = ON
trace_file_client = cli
trace_unique_client = on 
trace_filelen_client = 100 
trace_fileno_client = 2 
log_file_client = cli 
log_directory_client = c:\temp\log 
tnsping.trace_directory = c:\temp\trace 
tnsping.trace_level = admin


=========example
TRACE_UNIQUE_CLIENT = ON 
TRACE_LEVEL_CLIENT = 16 
TRACE_DIRECTORY_CLIENT = C:\temp 
TRACE_FILE_CLIENT = SQLNetTrace 
TRACE_TIMESTAMP_CLIENT = ON 
#TRACE_FILELEN_CLIENT = 2048 
#TRACE_FILENO_CLIENT = 2