
********** Oracle 10 Workload Capture **************
A workload can only be captured on a 10g database system. The replay must be run on an 11g or higher version.

- The PRE_11G_ENABLE_CAPTURE initialization parameter 
 SQL> show parameter pre_11
      NAME                                 TYPE        VALUE
      ------------------------------------ ----------- ------------------------------
      pre_11g_enable_capture               boolean     FALSE    

SQL> alter system set pre_11g_enable_capture=TRUE;
OR
$ORACLE_HOME/rdbms/admin/wrrenbl for enabling

I. Workload capture
===================
   In this phase users will capture the production workload from the database. Enabling the workload capture involves tracking and recording all external requests from users,
    application etc. and changes will be stored in binary files called capture files. These files will have information such as SCN, SQL Text, bind variables etc.

A- Create a directory where you want to keep all your capture files:

    SQL> Create or replace directory  db_replay_dir  AS '/home/oracle/tools/db_replay_dir';
    SQL> grant all on directory db_replay_dir to public;

A-2 ADD_FILTER Procedures : Adds a filter to capture a subset of the workload.
BEGIN
  DBMS_WORKLOAD_CAPTURE.ADD_FILTER (
                           fname => 'user_GRH',  -- Name of the filter that will be added.  
                           fattribute => 'USER', -- Attribute on which the filter will be applied  (PROGRAM, MODULE, ACTION, SERVICE, INSTANCE_NUMBER, USER)  
                           fvalue => 'GRH1');    -- Value for the corresponding attribute
                           END;
/                                       
A-3 DELETE_FILTER:                       
DBMS_WORKLOAD_CAPTURE.DELETE_FILTER (filter_name=>'user_GRH');                         
A-4 DELETE_CAPTURE_INFO:  deletes the rows in the DBA_WORKLOAD_CAPTURES and DBA_WORKLOAD_FILTERS views that corresponds to the given workload capture ID.
DBMS_WORKLOAD_CAPTURE.DELETE_CAPTURE_INFO  capture_id     IN   NUMBER);                  
                                                                                                   
Usage Notes :
- Capture filters work in either the DEFAULT INCLUSION or the DEFAULT EXCLUSION mode as determined by the default_action input to the START_CAPTURE Procedure. if default is include =(all workload but filters)
if default_action is exclude capture only defined workload filteres.
- All the filters are listed in the DBA_WORKLOAD_FILTERS view.
- views : DBA_WORKLOAD_FILTERS,DBA_WORKLOAD_CAPTURES


B- Use START_CAPTURE procedure to start workload capture:

       BEGIN
       DBMS_WORKLOAD_CAPTURE.START_CAPTURE (name => 'prd_server_capture',   --  Name of the workload that will be captured.
       				 dir      => 'db_replay_dir',               --  Directory where the captured workload will be stored.
       				 duration => 900,                           --  Number of seconds before the workload capture will end
       				 default_action=>'INCLUDE|EXCLUDE'          -- If INCLUDE, by default all DB user requests  will be captured, except for part defined by the filters .If EXCLUDE, by default no user request to the database will be captured, except for the part of the workload defined by the filters.
       				 capture_sts => TRUE,                       --  Parameter specifies whether to capture a SQL tuning set in parallel with the workload capture
       				 sts_cap_interval => 300);                  --  Duration of the SQL tuning set capture
       END;
       /
       
 SQL>  exec dbms_workload_capture.start_capture('prd_server_capture','db_replay_dir',NULL, 'EXCLUDE');    ---exclude includes only existing filters 
       
       
       
. If the DURATION parameter value is not specified then workload capture will continue until the FINISH_CAPTURE procedure is used.
. Use capture_sts parameter to capture a SQL tuning set in parallel with the workload capture.
. The default value of STS_CAP_INTERVAL is 300 and this parameter specifies the duration of the SQL tuning set capture.

Generated files :
-rw-r--r--    1 oracle   dba             995 Sep 11 08:56 wcr_4pad09400280u.rec
-rw-r--r--    1 oracle   dba               0 Sep 11 08:56 wcr_cap_0001n.start
-rw-r--r--    1 oracle   dba             130 Sep 11 08:56 wcr_scapture.wmd



C- Stopping a Workload Capture Usin  FINISH_CAPTURE procedure :

DBMS_WORKLOAD_CAPTURE.FINISH_CAPTURE (Timneout IN NUMBER DEFAULT 30, reason IN   VARCHAR2 DEFAULT NULL);

BEGIN	DBMS_WORKLOAD_CAPTURE.FINISH_CAPTURE ();
END;
/
By default, FINISH_CAPTURE will wait for 30 seconds .
                         
. Export AWR data, use the EXPORT_AWR procedure: snapshots of the workload capture ID of 2 (DBA_WORKLOAD_CAPTURES.ID)  are exported,along with any SQL tuning set possiblly captured during workload capture. 

SQL> declare
  capture_id number;
begin
 	 select max(id) into capture_id
  	 from dba_workload_captures
  	 where status = 'COMPLETED';
       dbms_workload_capture.export_awr(capture_id);
      end;
/  

===================================
report on the stipulated workload capture
DBMS_WORKLOAD_CAPTURE.REPORT (
                                capture_id      IN   NUMBER,
                               format          IN   VARCHAR2)
 RETURN CLOB;
 
 format : Specifies the report format. Valid values are DBMS_WORKLOAD_CAPTURE.TYPE_TEXT and DBMS_WORKLOAD_CAPTURE.TYPE_HTML
===================================     
  
II. Workload pre-processing:
=============================

In this phase, information in the capture files will be preprocessed and create all the metadata needed for replaying the workload. 
- This step can be resource and time consuming and it’s recommended to perform this step on a test system where you want to replay the database work load.

SQL> CREATE RESTORE POINT before_replay;

- Create a directory on the test server where you want to copy the files:
SQL> Create or replace directory db_replay_dir  AS '/home/oracle/tools/db_replay_dir';
SQL> grant read on directory db_replay_dir for public

-- Copy the capture files from production to test server It’s recommended to create a restore point, so that changes can be reverted after replay and same database used for other database work load tests:
Users must copy the capture files from production to the test system.
/u02/oradata/capture> scp -rp *.* target:/home/oracle/tools/db_replay_dir
 password:


Use the PROCESS_CAPTURE procedure to preprocess the captured workload:

BEGIN
	DBMS_WORKLOAD_REPLAY.PROCESS_CAPTURE (capture_dir => 'db_replay_dir');
END;
/
We need to do this always on the 11g side of things and this needs to be done only once. In other words, we process once but can replay many times.

III. Workload replay
=============================
In this phase users can replay the workload that’s captured and pre-processed. All the external requests which are recorded will be performed on the test system with same time and concurrency.
. Use the INITIALIZE_REPLAY procedure to initialize workload replay:
BEGIN
	DBMS_WORKLOAD_REPLAY.INITIALIZE_REPLAY(
			replay_name=> ‘prd_server_replay’,
			replay_dir => ‘db_replay_dir’);
END;
/
. Use the PREPARE_REPLAY procedure to prepare workload replay on the test database system:

BEGIN
	DBMS_WORKLOAD_REPLAY.PREPARE_REPLAY (synchronization => TRUE,
					capture_sts => TRUE,
					   sts_cap_interval => 300);
END;
/
The synchronization parameter default value is SCN this means the COMMIT order will be preserved and replay actions will be executed only after all dependent COMMIT actions are complete.

Before you run the replay procedures make sure to estimate the number of clients, hosts necessary to replay the captured workload using wrc.exe (workload replay client):

[oracle@server1]$ wrc  mode=calibrate  replaydir=/home/oracle/tools/db_replay_dir

Workload Replay Client: Release 11.2.0.1.0 - Production on Thu Apr 11 19:24:01 2013

Copyright (c) 1982, 2009, Oracle and/or its affiliates.  All rights reserved.

Report for Workload in: / home/oracle/tools/db_replay_dir
-----------------------

Recommendation:
Consider using at least 2 clients divided among 1 CPU(s).

Workload Characteristics:
- max concurrency: 3 sessions
- total number of sessions: 10

Assumptions:
- 1 client process per 50 concurrent sessions
- 4 client process per CPU
- think time scale = 100
- connect time scale = 100
- synchronization = TRUE
After determining the necessary clients and hosts needed to replay the workload, start the replay clients in replay mode:

[oracle@server1]$ rc system/xxxx@test_db mode=replay replaydir=/home/oracle/tools/db_replay_dir
Workload Replay Client: Release 11.2.0.1.0 - Production on Thu Apr 11 19:28:32 2013

Copyright (c) 1982, 2009, Oracle and/or its affiliates.  All rights reserved.
Wait for the replay to start (19:28:32)
Use the START_REPLAY procedure to start a workload replay:

BEGIN
	DBMS_WORKLOAD_REPLAY.START_REPLAY ();
END;
/
4. Analysis and Reporting:
In this phase users will perform detailed analysis of the reports from both the workload capture and workload replay phases. These reports will include information about errors, 
statistics about database time, average time spent, user call,  session info and data divergence.
Query the DBA_WORKLOAD_REPLAYS view to see the information about all the workload replays.

For advanced analysis and comparison users can use AWR (Automatic work load repository) reports and SQL Performance Analyzer to compare the SQL tuning set from capture and replay.

. Use DBMS_WORKLOAD_CAPTURE.REPORT function to generate Workload capture report:

DECLARE
	V_CAPID		NUMBER;
	V_REPORT	CLOB;
BEGIN
	V_CAPID  := DBMS_WORKLOAD_CAPTURE.GET_CAPTURE_INFO(dir => ‘db_replay_dir’);
	V_REPORT := DBMS_WORKLOAD_CAPTURE.REPORT(capture_id => V_CAPID,
				                 format => DBMS_WORKLOAD_CAPTURE.TYPE_HTML);
END;
/
Usage:
- dir specifies the directory which contains the workload capture files
- capture_id specifies the ID  related to the directory which contains the workload capture files .To get the capture_id use DBMS_WORKLOAD_REPLAY.GET_REPLAY_INFO function.

The report contains the information about workload capture such as filters, date, time, SCN of capture and overall statistics such as total database time captures, no of logins and transactions and any limitations due to version etc.

. Use DBMS_WORKLOAD_REPLAY.REPORT function to generate Workload replay report:

DECLARE
	V_REPOTT	CLOB;
	V_CAPID		NUMBER;
	V_REPID		NUMBER;

BEGIN
V_CAPID:= DBMS_WORKLOAD_REPLAY.GET_REPLAY_INFO(dir => ‘db_replay_dir’);
SELECT MAX (id)   INTO   V_REPID
	FROM	dba_workload_replays
	WHERE	capture_id = V_CAPID;
V_REPORT:= DBMS_WORKLOAD_REPLAY.REPORT(replay_id => V_REPID
				          format => DBMS_WORKLOAD_REPLAY.TYPE_HTML);
END;
/
Where:

dir specifies the directory which contains the workload replay files.
replay_id specifies the ID  related to the directory which contains the workload replay files. To get the replay_id use DBMS_WORKLOAD_REPLAY.GET_REPLAY_INFO function.
Format specifies the report format and three formats available. DBMS_WORKLOAD_REPLAY.TYPE_TEXT, DBMS_WORKLOAD_REPLAY.TYPE_HTML,DBMS_WORKLOAD_REPLAY.TYPE_XML

The report contains the information about workload replay and capture such as job name, duration, status, time, path, database information,
replay clients and overall statistics like total database time captured and replayed, no of logins, transactions, replay divergence, error divergence etc.
Once the analysis is competed, users are able to restore the database to its original state and can perform other replay tests.

If you have created a restore point use it to restore the database, otherwise use your back to restore.

Shutdown the database and startup in MOUNT state:
SQL> SHUTDOWN IMMEDIATE;
SQL> STARTUP MOUNT;
Restore the database to restore point and open the database with reset logs:
SQL> FLASHBACK DATBASE TO RESTORE POINT before_replay;
SQL> ALTER DATABASE OPEN RESETLOGS;                       