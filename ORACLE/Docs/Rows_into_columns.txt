Three Ways To Transpose Rows Into Columns in Oracle SQL

ORDER_MODE ORDER_STATUS ORDER_TOTAL
---------- ------------ -----------
direct                0    163131.3
direct                1    227569.5
direct                2    166169.5
direct                3    206659.4
direct                4     56352.5
direct                5    172586.2
direct                6      115968
direct                7     33617.1
direct                8    545300.5
direct                9    205674.2
direct               10       10601
online                0     25976.7
online                2    103834.4
online                3     56381.7
online                4    700068.1
online                5    183261.2
online                6     90411.8
online                8    322192.5
online                9     57062.4
online               10    225236.7

1a: Transpose rows into columns using SUM and DECODE to summarize data
======================================================================
SQL> SELECT	UPPER(o.order_mode) order_mode
  		,SUM(DECODE(o.order_status, 0, o.order_total)) stat_0
  		,SUM(DECODE(o.order_status, 1, o.order_total)) stat_1
  		,SUM(DECODE(o.order_status, 2, o.order_total)) stat_2
  		,SUM(DECODE(o.order_status, 3, o.order_total)) stat_3
  		,SUM(DECODE(o.order_status, 4, o.order_total)) stat_4
  		,SUM(DECODE(o.order_status, 5, o.order_total)) stat_5
  		,SUM(DECODE(o.order_status, 6, o.order_total)) stat_6
  		,SUM(DECODE(o.order_status, 7, o.order_total)) stat_7
  		,SUM(DECODE(o.order_status, 8, o.order_total)) stat_8
  		,SUM(DECODE(o.order_status, 9, o.order_total)) stat_9
  		,SUM(DECODE(o.order_status, 10, o.order_total)) stat_10
  FROM	orders o
  GROUP BY o.order_mode
  ORDER BY 1
  /

ORDER_MODE     STAT_0     STAT_1     STAT_2     STAT_3     STAT_4     STAT_5     STAT_6     STAT_7     STAT_8     STAT_9    STAT_10
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
DIRECT       163131.3   227569.5   166169.5   206659.4    56352.5   172586.2     115968    33617.1   545300.5   205674.2      10601
ONLINE        25976.7              103834.4    56381.7   700068.1   183261.2    90411.8              322192.5    57062.4   225236.7

Example # 1b: Transpose rows into columns using MAX and DECODE – for non-summarized data
======================================================================
 Table rates
 
  SCENARIO CURRENCY       RATE
---------- -------- ----------
         1 USD            1.00
         1 CAD            1.45
         1 MYR            3.34
         1 NOK            6.08
         2 USD            1.00
         2 CAD            1.47
         2 MYR            3.47
         2 NOK            6.12
         3 USD            1.00
         3 CAD            1.51
         3 MYR            2.98
         3 NOK            5.96
         
SQL> SELECT	x.scenario
   		,MAX(DECODE(x.currency, 'CAD', x.rate)) CAD_rate
   		,MAX(DECODE(x.currency, 'MYR', x.rate)) MYR_rate
   		,MAX(DECODE(x.currency, 'NOK', x.rate)) NOK_rate
   		,MAX(DECODE(x.currency, 'USD', x.rate)) USD_rate
   FROM	( SELECT r.scenario,r.currency,r.rate
           FROM rates r) x
   GROUP BY x.scenario
   /

  SCENARIO   CAD_RATE   MYR_RATE   NOK_RATE   USD_RATE
---------- ---------- ---------- ---------- ----------
         1       1.45       3.34       6.08          1
         2       1.47       3.47       6.12          1
         3       1.51       2.98       5.96          1
         
         
Example # 2:  Transpose rows into columns using the Oracle PIVOT operator:  introduced in Oracle version 11g
======================================================================================================

SQL> SELECT	UPPER(order_mode)
  2  		,stat_0
  3  		,stat_1
  4  		,stat_2
  5  		,stat_3
  6  		,stat_4
  7  		,stat_5
  8  		,stat_6
  9  		,stat_7
 10  		,stat_8
 11  		,stat_9
 12  		,stat_10
 13  FROM	(
 14              SELECT	o.order_mode
 15                      ,o.order_status
 16                      ,SUM(o.order_total) order_total
 17              FROM	orders o
 18              GROUP BY o.order_mode, o.order_status
 19  		)
 20  PIVOT	(
 21  			SUM(order_total) FOR order_status IN (0 stat_0, 1 stat_1, 2 stat_2, 3 stat_3, 4 stat_4, 5 stat_5, 6 stat_6, 7 stat_7, 8 stat_8, 9 stat_9, 10 stat_10)
 22  )
 23  /

UPPER(ORDER_MODE)     STAT_0     STAT_1     STAT_2     STAT_3     STAT_4     STAT_5     STAT_6     STAT_7     STAT_8     STAT_9    STAT_10
----------------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
DIRECT              163131.3   227569.5   166169.5   206659.4    56352.5   172586.2     115968    33617.1   545300.5   205674.2      10601
ONLINE               25976.7              103834.4    56381.7   700068.1   183261.2    90411.8              322192.5    57062.4   225236.7


Example # 3: Transpose rows into columns using WITH and sub SELECTS:
=======================================================================
SQL> WITH main_query AS (
  2                          SELECT	o.order_mode
  3                                  ,o.order_status
  4                                  ,SUM(o.order_total) order_total
  5                          FROM	orders o
  6                          GROUP BY o.order_mode, o.order_status
  7  )
  8  SELECT	UPPER(x.order_mode) order_mode
  9  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 0 ) stat_0
 10  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 1 ) stat_1
 11  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 2 ) stat_2
 12  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 3 ) stat_3
 13  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 4 ) stat_4
 14  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 5 ) stat_5
 15  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 6 ) stat_6
 16  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 7 ) stat_7
 17  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 8 ) stat_8
 18  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 9 ) stat_9
 19  		,(SELECT y.order_total FROM main_query y WHERE y.order_mode = x.order_mode AND y.order_status = 10 ) stat_10
 20  FROM	(
 21              SELECT	DISTINCT m.order_mode
 22              FROM	main_query m
 23  		) x
 24  /

ORDER_MODE     STAT_0     STAT_1     STAT_2     STAT_3     STAT_4     STAT_5     STAT_6     STAT_7     STAT_8     STAT_9    STAT_10
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
DIRECT       163131.3   227569.5   166169.5   206659.4    56352.5   172586.2     115968    33617.1   545300.5   205674.2      10601
ONLINE        25976.7              103834.4    56381.7   700068.1   183261.2    90411.8              322192.5    57062.4   225236.7




         