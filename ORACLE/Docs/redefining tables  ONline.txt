Oracle Database 10g Release 2 Online Data Reorganization & Redefinition Page 3

Oracle Database 10g added the following online capabilities: 
- Copy dependant objects i.e. triggers, constraints, indexes 
- Convert LONG and LONG RAW columns to a CLOB/LOB 
- Use a unique key as an alternative to a primary key or rowid 
- Specify columns to order data by 
- Change a table without recompiling stored procedures 
- Online segment shrink 
Oracle Database 10g Release 2 added the following online capabilities: 
- Reorganize a Single Partition 
- Reorganize Advanced Queue and Clustered Tables 
- Reorganize a table containing an ADT 
- Improved Copy Dependent Objects Capabilities 
o Retain and Clone Statistics 
o Check and Not Null Constraints 
o Dependent objects for nested tables 

Online table redefinition allows administrators to: 
- Modify the physical attributes or storage parameters of a table, advanced 
queue or clustered table 
- Move a heap table or IOT to a different tablespace 
- Add support for parallel queries 
- Add or drop partitioning support 
- Reorganize a Single Partition 
- Recreate a heap table or IOT to reduce fragmentation 
- Change a heap table to IOT and vice versa 
- Add, drop, or rename columns in a table 
- Convert a LONG or LONG RAW column to a LOB 
- Transform data in a table 
- Reorganize a table containing an Abstract Datatype 

BEGIN
DBMS_REDEFINITION.CAN_REDEF_TABLE('hr','admin_emp',
      DBMS_REDEFINITION.CONS_USE_PK);
END;
/select object_name, base_table_name, ddl_txt from
         DBA_REDEFINITION_ERRORS;
         
----------------------------------------------------------------------------------------------------------------------------------
                    The Oracle Database 10g DBMS_REDEFINITION PL/SQL package includes the following procedures:
----------------------------------------------------------------------------------------------------------------------------------

- DBMS_REDEFINITION.ABORT_REDEF_TABLE( ) 
- DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS( )  
- DBMS_REDEFINITION.REGISTER_DEPENDENT_OBJECT() 
- DBMS_REDEFINITION.UNREGISTER_DEPENDENT_OBJECT() 
- DBMS_REDEFINITION.START_REDEF_TABLE( ) 
- DBMS_REDEFINITION.SYNC_INTERIM_TABLE( ) 
- DBMS_REDEFINITION.FINISH_REDEF_TABLE( )

There are also two tables that may be useful to query during the redefinition 
process: 
- DBA_REDEFINITION_OBJECTS, objects used during redefinition 
- DBA_REDEFINITION_ERRORS          
         
=======================================         
A-Example of an Online Table Redefinition
=======================================
 
This example illustrates online redefinition of a non-partitioned table emp, with 
columns: empno, name, salary, phone. The schema name is u1 and the table is 
 redefined as follows: 
- The column salary is multiplied by a factor of 1.10 and renamed as sal 
- The column phone is dropped 
- A new column deptno is added, and a user-defined function u1.emp_dept is used to determine the value of deptno 
- The redefined table is partitioned by range on empno 
- Place the index emp_idx2 in tablespace tbs_2 
 
Step 1: Create an interim table int_emp
 
     CREATE TABLE int_emp 
      ( empno NUMBER , name VARCHAR2(100), 
          sal NUMBER, deptno NUMBER DEFAULT 10) 
             PARTITION BY RANGE(empno) 
               (PARTITION emp1000 VALUES LESS THAN (1000) TABLESPACE tbs_1, 
                PARTITION emp2000 VALUES LESS THAN (2000) TABLESPACE tbs_2); 

Step 2: Create the index on the interim table in different tablespace :
      CREATE INDEX int_emp_idx2 ON int_emp (deptno) TABLESPACE tbs_2; 

Step 3: Start the redefinition process 
       DBMS_REDEFINITION.START_REDEF_TABLE('user', 'emp', 'int_emp','empno empno, name name, salary*1.10 sal, emp_dept (empno) deptno ');         

Step 4: Manually Register Changed Index 
       DBMS_REDEFINITION.REGISTER_DEPENDENT_OBJECT('user', 'emp','int_emp', dbms_redefinition.cons_index,'user', 'emp_idx2','int_emp_idx2'); 

Step5: Clone dependent objects 
       DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS('user', 'emp','int_emp', 1, TRUE, TRUE, TRUE , FALSE, no_errors); 

Step 6: Optionally, synchronize the interim table int_emp 
DBMS_REDEFINITION.SYNC_INTERIM_TABLE('user', 'emp', 'int_emp'); 

Step 7: Complete the redefinition 
        DBMS_REDEFINITION.FINISH_REDEF_TABLE('u1', 'emp', 'int_emp'); 
        
After this call the table emp is redefined such that it has all the attributes of the int_emp table. The table emp becomes the newly redefined table. 
Step 8: Drop the interim table 
DROP TABLE int_emp; 

===============================================
B-Example of Reorganizing an Individual Partition 
===============================================

-This example illustrates reorganizing a single partition, emp2000, in the partitioned emp table,where it is moved to a new tablespace >tbs_3. 

Step 1: Create a non-partitioned interim table int_emp 

       CREATE TABLE int_emp (empno NUMBER , name VARCHAR2(100), sal NUMBER, deptno NUMBER DEFAULT 10)
             TABLESPACE tbs_3;
                    
Step 2: Start the redefinition process 
DBMS_REDEFINITION.START_REDEF_TABLE('u1', 'emp', 'int_emp',NULL, dbms_redefinition.cons_use_rowid, '', 'emp2000') ; 
By rowid—Use this method if no key is available. In this method, a hidden column named M_ROW$$
ALTER TABLE table_name SET UNUSED (column_name);

Step 3: Optionally, synchronize the interim table int_emp 
DBMS_REDEFINITION.SYNC_INTERIM_TABLE('u1', 'emp', 'int_emp',‘emp2000’);
 
Step 4: Complete the redefinition 
DBMS_REDEFINITION.FINISH_REDEF_TABLE('u1', 'emp', 'int_emp',‘emp2000’);
 
Step 5: Drop the interim table 
DROP TABLE int_emp;          
         
 
 CREATE TABLE int_emp 
(empno NUMBER , name VARCHAR2(100), 
 sal NUMBER, deptno NUMBER DEFAULT 10) 
TABLESPACE STG_MDPIDS1LOB;        
         
         
         CREATE TABLE emp 
(empno NUMBER , name VARCHAR2(100), 
 sal NUMBER, deptno NUMBER DEFAULT 10) 
PARTITION BY RANGE(empno) 
(PARTITION emp1000 VALUES LESS THAN (1000) TABLESPACE USERS, 
PARTITION emp2000 VALUES LESS THAN (2000) TABLESPACE USERS);
         
         DBMS_REDEFINITION.START_REDEF_TABLE('hf53es', 'emp', 'int_emp',NULL, dbms_redefinition.cons_use_rowid, '', 'emp2000') ;
         
         DBMS_REDEFINITION.SYNC_INTERIM_TABLE('hf53es', 'emp', 'int_emp',‘emp2000’); 
         
         DBMS_REDEFINITION.FINISH_REDEF_TABLE('hf53es','emp','int_emp', ‘emp2000’); 
         ---previous versions of 10g1
         ALTER TABLE emp SET UNUSED (M_ROW$$);
         DBA_UNUSED_COL_TABS
         ALTER TABLE emp DROP UNUSED COLUMNS;
         http://docs.oracle.com/cd/B28359_01/server.111/b28310/tables007.htm#ADMIN11677
         
         
         select table_name,row_movement from dba_tables where owner='FTP';
select 'alter table ' || owner || '.' || table_name || ' enable row movement;' from dba_tables where owner='FTP';
select 'alter table ' || owner || '.' || table_name || ' shrink space cascade;' from dba_tables where owner='FTP';


