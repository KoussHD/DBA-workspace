 ===========================================================================
 Utility:         Snapper -- Version:         4.0
--                  
-- Script:          snapper.sql
===========================================================================
 Usage:

      snapper.sql <ash[1-3]|stats|all>[,out][,trace][,pagesize=X][,gather=[s][t][w][l][e][b][a]]> <seconds_in_snap> <snapshot_count> <sid(s)_to_snap>
  Examples:
      NB! Read the online examples, these are more detailed and list script output too!
                  http://tech.e2sn.com/oracle-scripts-and-tools/session-snapper
                  
1. @snapper stats,ash 5 1 "select inst_id,sid from gv$session where username='kh85124' and programe like '%sqlplus%'"             
2. @snapper ash=inst_id+sid+sql_id+event 5 1 program=%sqlplus%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    SID, USERNAME  , TYPE, STATISTIC                                                 ,         DELTA, HDELTA/SEC,    %TIME, GRAPH       , NUM_WAITS,  WAITS/SEC,   AVERAGES
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    111, KH85124   , STAT, session logical reads                                     ,         41199,      8,85k,         ,             ,          ,           ,      41,2k total buffer visits
    111, KH85124   , STAT, user I/O wait time                                        ,           338,      72,58,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, physical read total IO requests                           ,          2576,     553,15,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, physical read total multi block requests                  ,          2576,     553,15,         ,             ,          ,           ,          0 total single block read requests
    111, KH85124   , STAT, physical read total bytes                                 ,     337379328,     72,45M,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, physical reads cache                                      ,         41200,      8,85k,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, physical read IO requests                                 ,          2577,     553,36,         ,             ,          ,           ,    130,97k bytes per request
    111, KH85124   , STAT, physical read bytes                                       ,     337510400,     72,47M,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, free buffer requested                                     ,         41188,      8,84k,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, free buffer inspected                                     ,         41216,      8,85k,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , STAT, physical reads cache prefetch                             ,         38623,      8,29k,         ,             ,          ,           ,          ~ per execution
    111, KH85124   , TIME, DB CPU                                                    ,       1700411,   365,13ms,    36.5%, [@@@@      ],          ,           ,
    111, KH85124   , TIME, sql execute elapsed time                                  ,       6570145,      1,41s,   141.1%, [##########],          ,           ,
    111, KH85124   , TIME, DB time                                                   ,       6570145,      1,41s,   141.1%, [##########],          ,           ,     -41,08 % unaccounted time
    111, KH85124   , WAIT, db file scattered read                                    ,       3426293,   735,73ms,    73.6%, [WWWWWWWW  ],      2571,     552,07,     1,33ms average wait

--  End of Stats snap 1, end=2016-06-20 14:40:03, seconds=4,7
-----------------------------------------------------------------------------------------------------------------------------------
  ActSes   %Thread | INST |    SID | SQL_ID          | EVENT                               | USERNAME             | WAIT_CLASS
-----------------------------------------------------------------------------------------------------------------------------------
     .90     (90%) |    1 |    111 | 2zwu61k9f01kj   | db file scattered read              | KH85124              | User I/O
     .10     (10%) |    1 |    111 | 2zwu61k9f01kj   | ON CPU                              | KH85124              | ON CPU

               
 3. MANUAL BEFORE/AFTER Snapshot:               
   START --   @snapper stats,ash=sql_id+username+event+sid+wait begin=test1 138 (or user) begin=test1 to Tag the snapshot
    END   --   @snapper stats,ash=sql_id+username+event+sid+wait end=test1 138
      SP2-0552: Bind variable "SNAPPER" not declared.   action: variable snapper refcursor;
     
 4.Include one type of statistic (REDO) 
  @snapper all,gather=s,sinclude=redo 5 1 user=KH85124     /or sinclude=redo.size$
  @snapper all,gather=s+w+t,tinclude=DB,sinclude=I/O 5 1 user=KH85124    (include t:time,s:stat,w:wait) 

 @snapper stats,ash=sql_id+username+event+sid+wait_class 5 1 138
 @snapper ash,stats 1 1 515
   (gv$sesstat & gv$sess_time_model statistics are reported by default ASH style session activity report is shown as well)
 @snapper stats,gather=w 1 1 515
      (only Wait event statistics are reported, no ASH)
      
 @snapper ash,gather=st 1 1 515 (Output only gv$sesstat and gv$sess_Time_model statistics are gathered + ASH)
      
5. Trace  - write output to server process tracefile

   @snapper trace,ash,gather=stw,pagesize=0 10 90 117,210,313     (Write 90 10-second snapshots into tracefile for session IDs 117,210,313 all stats reported, do not print any headers)
 
   @snapper trace,ash 900 999999999 "select sid from v$session"   (Take a snapshot of ALL sessions every 15 minutes and write the output to trace,loop (almost) forever )
 
6. Out   - use dbms_output.put_line() for output. output will be seen only when Snapper run completes        
   
   @snapper out,trace 300 12 "select sid from v$session where username='APPS'"  (Take 12 5-minute snapshots of all sessions belonging to APPS user, write output to both dbms_output and tracefile)
        @snapper4 ash=inst_id+sid+sql_id+event 5 1 "select sid from v$session where osuser like '%boulis'"
 7. Log writer 
 @snapper ash=username+event+wait_class,stats,gather=wt 5 1 lgwr  --logwritter info
 @snapper ash=username+event+wait_class,stats,gather=wt 5 1 lgwr@2  --log info from instance 2 inst_2  or use lgwr@* for all instances
 @snapper all 5 1 lgwrt  ---all=stats and ash
 @snapper ash=sid+event+wait_class,ash1=plsql_object_id+plsql_subprogram_id+sql_id,ash2=program+module+action 5 1 all
 @snapper ash=sid+event+wait_class,ash1=sid+sqlid+module,stats,gather=ts,tinclude=CPU,sinclude=parse 5 1 "select sid from v$session where username = 'SOE' and program like 'JDBC%'"
 @snapper ash=sid+event+wait_class,ash1=sid+sqlid+module,stats,gather=tsw 5 1 "select sid from v$session where osuser = 'Medisolution.GRELYN'"
 
 @snapper ash=sql_id+event+wait_class+blocking_session+p2+p3 5 1 144
 ----------------------------------------------------------------------------------------------------------------------
Active% | SQL_ID          | EVENT                     | WAIT_CLASS      | BLOCKING_SESSION  | P2           | P3
-----------------------------------------------------------------------------------------------------------------------
   100% | 5htvg1rhy5dfv   | enq: TM - contention      | Application     | 162               | 78452        | 0

===========================================================================
 Utility:            MyStats   -- Version:         3.0
--                  
-- Script:          mystats.sql
===========================================================================

-- Usage:           @mystats start [optional statistics type(s)]
--                  --<do some work>--
--                  @mystats stop [optional reporting parameter]
--                  
--                  Optional statistics types format:
--
--                  Short Format            Long Format Equivalent
--                  ----------------------- ----------------------
--                  s=[csv]                 stattypes=[csv]
--                  
--                  START: Statistics types values for the csv list are as follows:
--
--                  Statistics Type Short Format Long Format Equivalent
--                  --------------- ------------ ----------------------
--                  Statistic       s            statistic
--                  Latch           l            latch
--                  Time Model      t            time
--                  All (default)   a            all
--
--                  STOP: Optional reporting parameter formats:
--                  
--                  Short Format            Long Format Equivalent
--                  ----------------------- ----------------------
--                  t=<number>              threshold=<number>
--                  l=<string>              like=<string>
--                  n=<string list>         names=<string list>
--                  r=<regular expression>  regexp=<regular expression>  --                  Use double-quotes when the strings contain spaces, e.g. "option=value with space"

-- Examples:        1. Output all statistics
--                  -------------------------------------------------------------
                    @mystats start   | @mystats start s=s |  @mystats start s=s,t (statistics and time model only)
--                  --<do some work>--
--                  @mystats stop t=1000 (delta threshold)
--                  @mystats stop "n=redo size, user commits"  --name list 
                    |@mystats stop l=memory --name like 
                    |@mystats stop r=I/?O\s
                    | @mystats stop l=parallel
--

===========================================================================
 Utility:            Runstats   -- Version:         -- Version: 2.01
--                  
-- Script:          mystats.sql
===========================================================================
-- Usage:           Standard Runstats
--                  -------------------------------------------------------------
--                  @runstats start
--                  --<do run 1>--
--                  @runstats middle
--                  --<do run 2>--
--                  @runstats stop [reporting options] [include time model]
--                  END;
--                   
--                  STOP : Optional Reporting Parameter Formats
--                  ------------------------------------
--
--                  Position Short Format      Long Format Equivalent
--                  -------- ---------------   ----------------------
--                  2        t=<number>        threshold=<number>
--                  2        l=<string>        like=<string>
--                  2        n=<string list>   names=<string list>
--                  3        t or f            true or false
--
--                  Use double-quotes when the strings contain spaces. 
--
-- Examples:        Reporting Options 
--                  -----------------------
--    1. Output all statistics:
--     --   @runstats start 
            @runstats stop
--    
--    2. Output all statistics with delta<1,000:
--         @runstats stop t=1000

--    3. statistics for given statistic names only:
--       @runstats stop "n=redo size,user commits"
--    
--    4. Output statistics for statistics containing search phrase:
--        @runstats stop l=memory
--    
--    5. Suppress the time model report (all formats):
--                        @runstats stop "" false
--                        @runstats stop t=1000 false
--                        @runstats stop "n=redo size" false
--                        @runstats stop l=memory false
Resumable Runstats
--            -------------------------------------------------------------
--     @runstats start
--       --<do run 1>--
--     @runstats pause
--      --<do some work e.g. to reset test data>--
--     @runstats resume
--      --<do run 2>--
--     @runstats stop [reporting options] [include time model]




===========================================================================
 Utility:            MOATS  -- Version:         -- Version:         2.01
--                  
-- Script:          mystats.sql
===========================================================================

1. Prerequisites
------------------
 A- System Privileges: 
 CREATE TYPE,CREATE TABLE,CREATE VIEW,CREATE PROCEDURE
 B- Object Privileges:
  EXECUTE ON SYS.DBMS_LOCK,SELECT ON V_$SESSION,SELECT ON V_$STATNAME,SELECT ON V_$SYSSTAT,SELECT ON V_$LATCH,SELECT ON V_$TIMER,SELECT ON V_$SQL
  OR SELECT ANY DICTIONARY
2. Installation
------------------
- run as sysdba : moats_privs_grant.sql    [chose Target MOATS schema) 
- run as MOATS schema: moats_install.sql script

3. SQPLUS SETTING:

 - Setting Window Size
   SQL>set serveroutput on format wrapped
   SQL> exec moats_format_windows;  // resize windows to dotted lines (11036 min)
 - Setting layout: 
   run : moats_settings.sql
 
4- USAGE:
 SQL> moats_settings.sql
START** SQL> SELECT * FROM   TABLE(moats.top)/ SELECT * FROM TABLE(moats.top(5));     OR from TOP VIEW :SELECT * FROM top;   
STOP**    Ctrl+c
 
 refresh setting:
SQL> exec moats.set_parameter(moats.gc_top_refresh_rate, 3); |

 + INSTANCE SUMMARY ------------------------------------------------------------------------------------------+
   | Instance: ora112           | Execs/s:     2.0 | sParse/s:     0.0 | LIOs/s:  219637.3 | Read MB/s:     0.0 |
   | Cur Time: 13-Aug 19:25:14  | Calls/s:     0.0 | hParse/s:     0.0 | PhyRD/s:      0.5 | Write MB/s:    0.0 |
   | History:  0h 0m 26s        | Commits/s:   0.0 | ccHits/s:     1.5 | PhyWR/s:      2.9 | Redo MB/s:     0.0 |
   +------------------------------------------------------------------------------------------------------------+

   + TOP SQL_ID (child#) -----+ TOP SESSIONS ---------+      + TOP WAITS -------------------------+ WAIT CLASS -+
   |  50% | bwx4var9q4y9f (0) | 71                    |      | 100% | latch: cache buffers chains | Concurrency |
   |  50% | bq2qr0bhjyv1c (0) | 133                   |      |  50% | SQL*Net message to client   | Network     |
   |  50% | 799uuu8tpf6rk (0) | 6                     |      |                                    |             |
   +--------------------------------------------------+      +--------------------------------------------------+

   + TOP SQL_ID ----+ PLAN_HASH_VALUE + SQL TEXT ---------------------------------------------------------------+
   | bwx4var9q4y9f  | 2119813036      | select  /*+ full(a) full(b) use_nl(a b) */  count(*) from  sys.obj$ a,  |
   |                |                 | ys.obj$ b where  a.name = b.name and rownum <= 1000002                  |
   + ---------------------------------------------------------------------------------------------------------- +
   | bq2qr0bhjyv1c  | 644658511       | select moats_ash_ot( systimestamp, saddr, sid, serial#, audsid, paddr,  |
   |                |                 | er#,                                  username, command, ownerid, taddr |
   + ---------------------------------------------------------------------------------------------------------- +
   | 799uuu8tpf6rk  | 2119813036      | select  /*+ full(a) full(b) use_nl(a b) */  count(*) from  sys.obj$ a,  |
   |                |                 | ys.obj$ b where  a.name = b.name and rownum <= 1000001                  |
   + ---------------------------------------------------------------------------------------------------------- +




--  Notes:
--
--      Snapper does not currently detect if a session with given SID has
--      ended and been recreated between snapshots, thus it may report bogus
--      statistics for such sessions. The check and warning for that will be
--      implemented in a future version.

--          ash      - sample session activity ASH style, waits and SQL_IDs from gv$session and
--                     print a TOP SQL/wait report from these samples (this is the default from
--                     Snapper 3.0). The columns chosen for TOP calculation are defined in CONFIG
--                     section below.
--
--          ash=sql_id+event+wait_class
--                   - the above example illustrates that you can also specify the gv$session
--                     columns for TOP report yourself. The above example will show a TOP
--                     activity report grouped by SQL_ID + EVENT + WAIT_CLASS
--                     Note that the columns are separated by a "+" sign (as comma is a snapper 
--                     parameter separator, not ASH column separator)
--
--          ash1
--          ash2
--          ash3     - in addition to "ash" report you can have 3 more reported during the same
--                     snapper sampling snapshot. Just include ash1=col1+col2,ash2=col3+col4,...
--                     parameters if you want multiple TOP reports per Snapper snapshot
--
--          stats    - sample gv$sesstat,gv$sess_time_model,gv$session_event performance counters
--                     and report how much these stats increased (deltas) during Snapper run
--          all      - report both ASH and stats sections
--
--          out      - use dbms_output.put_line() for output. output will be seen only when
--                     Snapper run completes due to dbms_output limitations. This is the default.
--          trace    - write output to server process tracefile
--                     (you must have execute permission on sys.dbms_system.ksdwrt() for that,
--                      you can use both out and trace parameters together if you like )
--
--          pagesize - display header lines after X snapshots. if pagesize=0 don't display
--                     any headers. pagesize=-1 will display a terse header only once
--
--          gather   - if omitted, gathers s,t,w statistics (see below)
--                   - if specified, then gather following:
--
--                        Session-level stats:
--                          s - Session Statistics from gv$sesstat
--                          t - Session Time model info from gv$sess_time_model
--                          w - Session Wait statistics from gv$session_event and gv$session_wait
--
--                        Instance-level stats:
--                          l - instance Latch get statistics ( gets + immediate_gets )
--                          e - instance Enqueue lock get statistics
--                          b - buffer get Where statistics -- useful in versions up to 10.2.x
--                          a - All above
--
--          sinclude - if specified, then show only GV$SESSTAT stats which match the LIKE pattern of sinclude (REGEXP_LIKE in 10g+)
--                     
--          linclude - if specified, then show only GV$LATCH latch stats which match the LIKE pattern of linclude (REGEXP_LIKE in 10g+)
--                     
--          tinclude - if specified, then show only GV$SESS_TIME_MODEL stats which match the LIKE pattern of tinclude (REGEXP_LIKE in 10g+)
--                     
--          winclude - if specified, then show only GV$SESSION_EVENT wait stats which match the LIKE pattern of winclude (REGEXP_LIKE in 10g+
--                     )
--
--          you can combine above parameters in any order, separate them by commas
--          !!!don't use spaces as otherwise they are treated as next parameters by sqlplus   !!!
--          !!!if you want to use spaces, enclose the whole sqlplus parameter in doublequotes !!!
--
--      <seconds_in_snap> - the number of seconds between taking snapshots
--      <snapshot_count>  - the number of snapshots to take ( maximum value is power(2,31)-1 )
--
--      <sids_to_snap> can be either one sessionid, multiple sessionids separated by
--      commas or a SQL statement which returns a list of SIDs (if you need spaces
--      in that parameter text, enclose it in double quotes).
--
--      if you want to snap ALL sids, use "all" as value for
--      <sids_to_snap> parameter
--
--      alternatively you can use "select sid from gv$session" as value for <sids_to_snap>
--      parameter to capture all SIDs. you can write any query (with multiple and/or)
--      conditions to specify complex rules for capturing only the SIDs you want
--
--      starting from version 3.0 there are further session_id selection options available in 
--      instead of sid you can write such expressions for snapper's <sids_to_snap> parameter:
--
--         sid=123     -- take sid 123 only (the same as just writing 123)
--         user=tanel  -- take all sessions where username is 'tanel' (case insensitive)
--                     -- this is the same as writing following subquery for the 
--                     -- <sids_to_snap> parameter:
--                            select sid from gv$session where lower(username) like lower('tanel')
--                     
--         user=tanel% -- take all sessions where username begins with 'tanel%' (case insensitive)
--                     -- the = means actually LIKE in SQL terms in this script
-- 
--          spid=1234  -- all these 3 parameters do the same thing:
--          ospid=1234 -- they look up the sessions(s) where the processes OS PID=1234
--          pid=1234   -- this is useful for quickly looking up what some OS process is doing
--                     -- if it consumes too much of some resource
--          qc=123     
--          qcsid=123  -- show query coordinator and all PX slave sessions
--
--         program=sqlplus%     -- the following examples filter by corresponding gv$session coulmns 
--         machine=linux01      -- machine
--         osuser=oracle        -- os username
--         module=HR            -- module
--         "action=Find Order"  -- note the quotes because there is a space inside the parameter
--                              -- value
--         client_id=tanelpoder -- show only sessions where client_identifier is set to tanelpoder
--                              -- this is very useful in cases with (properly instrumented)
--                              -- connection pools
--
--
--      Note that if you want to change some "advanced" snapper configuration parameters
--      or default values then search for CONFIG in this file to see configurable
--      variable section
--
--
