
APPLIES TO:



Identity Manager - Version 11.1.1.3.0 and later
Information in this document applies to any platform.
PURPOSE

Every application using oracle database as backend repository runs several SQL statements.

For every SQL statement execution in oracle database, certain area in memory is allocated. Oracle PL/SQL allows you to name this area. This private SQL area is called context area or cursor. These cursors take up space in the shared pool (essential memory component of oracle database), specifically in the library cache. To keep a renegade session from filling up the library cache, or clogging the CPU with millions of parse requests, we set the parameter OPEN_CURSORS.

One defines the value/limit of these cursors as a DB parameter called OPEN_CUSRSORS in database instance.

OPEN_CURSORS DB parameter sets the maximum number of cursors each session can have open, per session. For example, if OPEN_CURSORS value is set to 1000, then each session can have up to 1000 cursors open at one time.

Many times we face issues due to maxing out of these cursors in our database because of connection leakage from application code as below:

 

java.sql.SQLException: ORA-00604: error occurred at recursive SQL level 1

ORA-01000: maximum open cursors exceeded ORA-00604: error occurred at

recursive SQL level 1 


ORA-01000:	maximum open cursors exceeded
Cause:	A host language program attempted to open too many cursors. The initialization parameter OPEN_CURSORS determines the maximum number of cursors per user.
Action:	Modify the program to use fewer cursors. If this error occurs often, shut down Oracle, increase the value of OPEN_CURSORS, and then restart Oracle.






TROUBLESHOOTING STEPS

 

Steps to troubleshoot the open_cursors issue like above are:

Login to SYS schema (or any schema with DBA privilege) of database.
Find out the session which is causing ORA-01000: maximum open cursors exceeded  using
Below Sql

select a.value, s.username, s.sid, s.serial# from v$sesstat a
, v$statname b, v$session s where a.statistic# = b.statistic#  
and s.sid=a.sid and b.name = 'opened cursors current' and s.username is not null;
Example:

 

Now one can see which all queries are causing maxing out of open cursors using below Sql:
select  sid ,sql_text, count(*) as "OPEN CURSORS", user_name from v$open_cursor where sid in ($SID);
 

It will provide the top queries which are opening maximum cursors and not closing subsequent cursors gracefully.

If some code is running above Sql queries then one should check  that Java Statement, Resultset or connection are closing properly or not if they have access to the code. If the code is not closing the connections, one has to close all the open connections properly so that one can save memory leaks in the code and save on DB memory.

Additional Reference:

SELECT s.machine, oc.user_name, oc.sql_text, count(1)   FROM v$open_cursor oc,v$session s 
WHERE oc.sid = s.sid and user_name != 'SYS'  GROUP BY user_name,sql_text, machine  HAVING COUNT(1) > 5  ORDER BY count(1) DESC;
To see if you've set OPEN_CURSORS high enough, monitor v$sesstat for the maximum opened cursors current. If your sessions are running close to the limit, up the value of OPEN_CURSORS.

SELECT  max(a.value) as highest_open_cur, p.value as max_open_cur FROM v$sesstat a, v$statname b, v$parameter p WHERE  a.statistic# = b.statistic#  and b.name = 'opened cursors current' and p.name= 'open_cursors' group by p.value;